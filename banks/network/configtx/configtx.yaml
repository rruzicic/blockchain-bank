# Copyright IBM Corp. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#

#
#   Section: Organizations
#
#   - This section defines the different organizational identities which will
#   be referenced later in the configuration.
#
################################################################################
Organizations:
  - &Orderer1Org
    Name: Orderer1Org

    # of the fabric.git development environment
    # in production but may be used as a template for other definitions
    # SampleOrg defines an MSP using the sampleconfig.  It should never be used
    # DefaultOrg defines the organization which is used in the sampleconfig
    # ID to load the MSP definition as
    ID: Orderer1MSP

    # MSPDir is the filesystem path which contains the MSP configuration
    MSPDir: ../organizations/ordererOrganizations/orderer1.example.com/msp

    # Policies defines the set of policies at this level of the config tree
    # For organization policies, their canonical path is usually
    #   /Channel/<Application|Orderer>/<OrgName>/<PolicyName>
    Policies:
      Readers:
        Type: Signature
        Rule: "OR('Orderer1MSP.member')"
      Writers:
        Type: Signature
        Rule: "OR('Orderer1MSP.member')"
      Admins:
        Type: Signature
        Rule: "OR('Orderer1MSP.admin')"

    OrdererEndpoints:
      - orderer1.example.com:5001

  - &Orderer2Org
    Name: Orderer2Org

    # of the fabric.git development environment
    # in production but may be used as a template for other definitions
    # SampleOrg defines an MSP using the sampleconfig.  It should never be used
    # DefaultOrg defines the organization which is used in the sampleconfig
    # ID to load the MSP definition as
    ID: Orderer2MSP

    # MSPDir is the filesystem path which contains the MSP configuration
    MSPDir: ../organizations/ordererOrganizations/orderer2.example.com/msp

    # Policies defines the set of policies at this level of the config tree
    # For organization policies, their canonical path is usually
    #   /Channel/<Application|Orderer>/<OrgName>/<PolicyName>
    Policies:
      Readers:
        Type: Signature
        Rule: "OR('Orderer2MSP.member')"
      Writers:
        Type: Signature
        Rule: "OR('Orderer2MSP.member')"
      Admins:
        Type: Signature
        Rule: "OR('Orderer2MSP.admin')"

    OrdererEndpoints:
      - orderer2.example.com:6001

  - &Org1
    Name: Org1MSP

    # of the fabric.git development environment
    # DefaultOrg defines the organization which is used in the sampleconfig
    # ID to load the MSP definition as
    ID: Org1MSP

    MSPDir: ../organizations/peerOrganizations/org1.example.com/msp

    # Policies defines the set of policies at this level of the config tree
    # For organization policies, their canonical path is usually
    #   /Channel/<Application|Orderer>/<OrgName>/<PolicyName>
    Policies:
      Readers:
        Type: Signature
        Rule: "OR('Org1MSP.admin', 'Org1MSP.peer', 'Org1MSP.client')"
      Writers:
        Type: Signature
        Rule: "OR('Org1MSP.admin', 'Org1MSP.client')"
      Admins:
        Type: Signature
        Rule: "OR('Org1MSP.admin')"
      Endorsement:
        Type: Signature
        Rule: "OR('Org1MSP.peer')"

  - &Org2
    Name: Org2MSP

    # of the fabric.git development environment
    # DefaultOrg defines the organization which is used in the sampleconfig
    # ID to load the MSP definition as
    ID: Org2MSP

    MSPDir: ../organizations/peerOrganizations/org2.example.com/msp

    # Policies defines the set of policies at this level of the config tree
    # For organization policies, their canonical path is usually
    #   /Channel/<Application|Orderer>/<OrgName>/<PolicyName>
    Policies:
      Readers:
        Type: Signature
        Rule: "OR('Org2MSP.admin', 'Org2MSP.peer', 'Org2MSP.client')"
      Writers:
        Type: Signature
        Rule: "OR('Org2MSP.admin', 'Org2MSP.client')"
      Admins:
        Type: Signature
        Rule: "OR('Org2MSP.admin')"
      Endorsement:
        Type: Signature
        Rule: "OR('Org2MSP.peer')"

  - &Org3
    Name: Org3MSP

    # of the fabric.git development environment
    # DefaultOrg defines the organization which is used in the sampleconfig
    # ID to load the MSP definition as
    ID: Org3MSP

    MSPDir: ../organizations/peerOrganizations/org3.example.com/msp

    # Policies defines the set of policies at this level of the config tree
    # For organization policies, their canonical path is usually
    #   /Channel/<Application|Orderer>/<OrgName>/<PolicyName>
    Policies:
      Readers:
        Type: Signature
        Rule: "OR('Org3MSP.admin', 'Org3MSP.peer', 'Org3MSP.client')"
      Writers:
        Type: Signature
        Rule: "OR('Org3MSP.admin', 'Org3MSP.client')"
      Admins:
        Type: Signature
        Rule: "OR('Org3MSP.admin')"
      Endorsement:
        Type: Signature
        Rule: "OR('Org3MSP.peer')"

  - &Org4
    Name: Org4MSP

    # of the fabric.git development environment
    # DefaultOrg defines the organization which is used in the sampleconfig
    # ID to load the MSP definition as
    ID: Org4MSP

    MSPDir: ../organizations/peerOrganizations/org4.example.com/msp

    # Policies defines the set of policies at this level of the config tree
    # For organization policies, their canonical path is usually
    #   /Channel/<Application|Orderer>/<OrgName>/<PolicyName>
    Policies:
      Readers:
        Type: Signature
        Rule: "OR('Org4MSP.admin', 'Org4MSP.peer', 'Org4MSP.client')"
      Writers:
        Type: Signature
        Rule: "OR('Org4MSP.admin', 'Org4MSP.client')"
      Admins:
        Type: Signature
        Rule: "OR('Org4MSP.admin')"
      Endorsement:
        Type: Signature
        Rule: "OR('Org4MSP.peer')"
################################################################################
#
#   SECTION: Capabilities
#
#   - This section defines the capabilities of fabric network. This is a new
#   concept as of v1.1.0 and should not be utilized in mixed networks with
#   v1.0.x peers and orderers.  Capabilities define features which must be
#   present in a fabric binary for that binary to safely participate in the
#   fabric network.  For instance, if a new MSP type is added, newer binaries
#   might recognize and validate the signatures from this type, while older
#   binaries without this support would be unable to validate those
#   transactions.  This could lead to different versions of the fabric binaries
#   having different world states.  Instead, defining a capability for a channel
#   informs those binaries without this capability that they must cease
#   processing transactions until they have been upgraded.  For v1.0.x if any
#   capabilities are defined (including a map with all capabilities turned off)
#   then the v1.0.x peer will deliberately crash.
#
################################################################################
Capabilities:
  # Channel capabilities apply to both the orderers and the peers and must be
  # supported by both.
  # Set the value of the capability to true to require it.
  Channel: &ChannelCapabilities
    V2_0: true
    # V2_0 capability ensures that orderers and peers behave according
  # Orderer capabilities apply only to the orderers, and may be safely
  # used with prior release peers.
  # Set the value of the capability to true to require it.
  Orderer: &OrdererCapabilities
    V2_0: true
    # V2_0 orderer capability ensures that orderers behave according
  # Application capabilities apply only to the peer network, and may be safely
  # used with prior release orderers.
  # Set the value of the capability to true to require it.
  Application: &ApplicationCapabilities
    V2_0: true
    # V2_0 application capability ensures that peers behave according
################################################################################
#
#   SECTION: Application
#
#   - This section defines the values to encode into a config transaction or
#   genesis block for application related parameters
#
################################################################################
Application: &ApplicationDefaults
  Organizations:
  # the application side of the network
  # Organizations is the list of orgs which are defined as participants on

  # Policies defines the set of policies at this level of the config tree
  # For Application policies, their canonical path is
  #   /Channel/Application/<PolicyName>
  Policies:
    Readers:
      Type: ImplicitMeta
      Rule: "ANY Readers"
    Writers:
      Type: ImplicitMeta
      Rule: "ANY Writers"
    Admins:
      Type: ImplicitMeta
      Rule: "MAJORITY Admins"
    LifecycleEndorsement:
      Type: ImplicitMeta
      Rule: "MAJORITY Endorsement"
    Endorsement:
      Type: ImplicitMeta
      Rule: "MAJORITY Endorsement"

  Capabilities:
    !!merge <<: *ApplicationCapabilities
################################################################################
#
#   SECTION: Orderer
#
#   - This section defines the values to encode into a config transaction or
#   genesis block for orderer related parameters
#
################################################################################
Orderer: &OrdererDefaults
  OrdererType: etcdraft # Orderer Type: The orderer implementation to start

  # Addresses used to be the list of orderer addresses that clients and peers
  # could connect to.  However, this does not allow clients to associate orderer
  # addresses and orderer organizations which can be useful for things such
  # as TLS validation.  The preferred way to specify orderer addresses is now
  # to include the OrdererEndpoints item in your org definition
  Addresses:
    - orderer1.example.com:5001
    - orderer2.example.com:6001

  EtcdRaft:
    Consenters:
      - Host: orderer1.example.com
        Port: 5001
        ClientTLSCert: ../organizations/ordererOrganizations/orderer1.example.com/orderers/orderer1.example.com/tls/server.crt
        ServerTLSCert: ../organizations/ordererOrganizations/orderer1.example.com/orderers/orderer1.example.com/tls/server.crt
      - Host: orderer2.example.com
        Port: 6001
        ClientTLSCert: ../organizations/ordererOrganizations/orderer2.example.com/orderers/orderer2.example.com/tls/server.crt
        ServerTLSCert: ../organizations/ordererOrganizations/orderer2.example.com/orderers/orderer2.example.com/tls/server.crt

  # Batch Timeout: The amount of time to wait before creating a batch
  BatchTimeout: 1s

  # Batch Size: Controls the number of messages batched into a block
  BatchSize:
    # Max Message Count: The maximum number of messages to permit in a batch
    MaxMessageCount: 2

    # Absolute Max Bytes: The absolute maximum number of bytes allowed for
    # the serialized messages in a batch.
    AbsoluteMaxBytes: 99 MB

    # Preferred Max Bytes: The preferred maximum number of bytes allowed for
    # the serialized messages in a batch. A message larger than the preferred
    # max bytes will result in a batch larger than preferred max bytes.
    PreferredMaxBytes: 512 KB

  # Organizations is the list of orgs which are defined as participants on
  # the orderer side of the network
  Organizations:

  # Policies defines the set of policies at this level of the config tree
  # For Orderer policies, their canonical path is
  #   /Channel/Orderer/<PolicyName>
  Policies:
    Readers:
      Type: ImplicitMeta
      Rule: "ANY Readers"
    Writers:
      Type: ImplicitMeta
      Rule: "ANY Writers"
    Admins:
      Type: ImplicitMeta
      Rule: "MAJORITY Admins"
    # BlockValidation specifies what signatures must be included in the block
    # from the orderer for the peer to validate it.
    BlockValidation:
      Type: ImplicitMeta
      Rule: "ANY Writers"

################################################################################
#
#   CHANNEL
#
#   This section defines the values to encode into a config transaction or
#   genesis block for channel related parameters.
#
################################################################################
Channel: &ChannelDefaults
  Policies:
    # Who may invoke the 'Deliver' API
    Readers:
      Type: ImplicitMeta
      Rule: "ANY Readers"
    # Who may invoke the 'Broadcast' API
    Writers:
      Type: ImplicitMeta
      Rule: "ANY Writers"
    # By default, who may modify elements at this config level
    Admins:
      Type: ImplicitMeta
      Rule: "MAJORITY Admins"

  #   /Channel/<PolicyName>
  # For Channel policies, their canonical path is
  # Policies defines the set of policies at this level of the config tree
  # Capabilities describes the channel level capabilities, see the
  # dedicated Capabilities section elsewhere in this file for a full
  # description
  Capabilities:
    !!merge <<: *ChannelCapabilities

################################################################################
#
#   Profile
#
#   - Different configuration profiles may be encoded here to be specified
#   as parameters to the configtxgen tool
#
################################################################################
Profiles:
  FourOrgsOrdererGenesis:
    !!merge <<: *ChannelDefaults
    Orderer:
      !!merge <<: *OrdererDefaults
      Organizations:
        - *Orderer1Org
        - *Orderer2Org
      Capabilities:
        !!merge <<: *OrdererCapabilities
    Consortiums:
      SampleConsortium:
        Organizations:
          - *Org1
          - *Org2
          - *Org3
          - *Org4
  FourOrgsChannel:
    Consortium: SampleConsortium
    !!merge <<: *ChannelDefaults
    Application:
      !!merge <<: *ApplicationDefaults
      Organizations:
        - *Org1
        - *Org2
        - *Org3
        - *Org4
      Capabilities:
        !!merge <<: *ApplicationCapabilities
